Fault-Tolerance in the Borealis Distributed Stream Processing System
Magdalena Balazinska, Hari Balakrishnan, 
Samuel Madden, and Michael Stonebraker
MIT computer science & Artificial Intelligence Lab.
Presenter: Youngki Lee


Contents
One-line comments
Motivation scenario
Technical challenges
Fault-Tolerance Approach
Experimental Results
Critics
New ideas


One line comment
The paper present a replication-based approach to fault-tolerant distributed stream processing in the face of node failures, network failures, and network partitions.

Motivation scenario
SPE
SPE
SPE
X: 3 seconds
SPE
X: 60 seconds
X: 1 second
Downstream neighbors want
1. new tuples to be processed within time threshold X
2. to get eventual correct result

X: 3 seconds
Upstream
neighbor
Downstream
neighbor

Technical challenges
Provide user-defined availability
Keep consistency among replicas
Provide eventual correct result

Fault-Tolerance Approach
If an input stream fails, find another replica
No replica available, produce tentative tuples
Correct tentative results after failures
STABLE
UPSTREAM
FAILURE
STABILIZING
Failure heals
Another upstream failure in progress
Reconcile state
Corrected output

Fault-Tolerance Approach : STABLE 
Only need to keep consistency among replicas
Deterministic operators
SUNION
s1
s2
Node 1
SUNION
S
TCP connection
Node 1â€™
SUNION
S
s3

Fault-Tolerance Approach : UPSTREAM FAILIRE
If an upstream neighbor is no longer in the STABLE state or is unreachable
Switch to another STABLE replica
If no STABLE replica exists, it continues with data from a replica in the UP_FAILURE state
Delay new tuples as much as possible(X-P) and process
Or just process without any delay


Fault-Tolerance Approach : STABILIZATION
State reconciliation
Checkpoint/redo
Undo/redo
Stabilizing output streams
Processing new tuples during reconciliation
If (Reconciliation time < X-P) then suspend else delay, or process
Failed node recovery

Experimental results(1/2)

Experimental results(1/2)
Reconciliation (performance & overhead)

Critiques
Strong points
Their method reduce the degree of inconsistency while guaranteeing high availability using the characteristics of data streams
Actually implement their scheme in Borealis system

Weak points
Only support deterministic operator
Solving consistency problems only serializing input streams
Time window -> not exact consistency
Too much overhead
Processing overhead by replications
Memory overhead
Buffering tentative input streams
Buffering output streams which might used by other downstream neighbors
Is result modification actually necessary?

New ideas
Put replicas in regionally distributed area and construct content distribution stream network.
Downstream users are distributed
Scalability and fast response time
Also provides fault-tolerance and high availability
overlay multicasting of source streams, service discovery might be necessary

What if different users pose all the different queries
Fine-granularity stabilization is necessary.
User must be able to specify the eventual correct result is necessary or not

Communication between replicas could reduce the computations and might support non-deterministic operators
K out of N replicas process 


Questions?

Operator-level scenario 
s1
s2
Node 1
U
S
Node 2
m
s3
s4


