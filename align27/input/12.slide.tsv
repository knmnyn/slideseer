0	Automatic Physical Database Tuning: A Relaxation-based Approach Betül Demiröz 
1	Introduction DBMS applications have become increasingly complex  combinatorial explosion of physical structures to consider  structures interact with each other the problem cannot be divided into simpler, independent sub-goals To reduce DBMS’s total cost, automated physical design tools are used 
2	Automatic Physical Design Problem - I W = workload of representative queries and updates B = space constraint Find the set of physical structures that  finds lowest estimated execution cost of queries in W  fits in B 
3	Automatic Physical Design Problem - II Aim  Handle large workloads and multiple kinds of physical structures Recent Techniques  Very complex  Difficult to analyze and extract properties Proposed Technique  Simple, complexity is reduced  Gives comparable recommendations  
4	Problem Statement 
5	Automated Selection of Physical Design Recent Solutions  Candidate access paths are heuristicly chosen  Bottom-up search is used to identify the best overall configuration Proposed Solution  Indexes and views are recommended  Reduces assumptions and heuristics 
6	Recent Techniques What-If API  Determine impact without actually materializing physical design Dependence on the optimizer  Keep optimizer and its cost model in sync with the tuning process Search Framework Find a good set of candidate structures Indexes and views Augment the initial candidate set by merging two or more candidates together Search the augmented space Bottom-up techniques are used Greedy algorithm or knapsack and subsequent random permutations 
7	Database Tuning Compress Workload Candidate Selection(per query) Enumeration Time? Yes No Merging TuningClient … Query Optimizer Database Server What-ifAPI Metadata - Create Hypothetical Index/View.- Optimize Query with respect to hypothetical configurations. 
8	Proposed Technique - I Agrees with what-if API and dependence on the optimizer Changes search framework  Find a good set of candidate structures For complex queries, candidate structures can be very large Bound on the maximum number of candidate structures to consider per query and rank the candidates using heuristics   Combine merging and enumeration steps Generate many alternatives during merging not to miss good solutions Put some constraints over merged structures to avoid large growth 
9	Proposed Technique - II A small set of physical structures are identified  structures are guaranteed to result in an optimal configuration A different search technique is used  opposite of bottom-up search  start with a large configuration time-wise optimal but too large to fit in the available storage  shrink it using transformations  advantages: quality and performance 
10	New Architecture … Query Optimizer Database Server What-ifAPI Metadata Relaxation Time? Yes No Tuning Client Request Identification Get Optimal Configuration(per query) Instrumenting the query optimizer. Search strategy based on relaxations. RequestsAPI 
11	Instrumenting the Query Optimizer Optimization of a single query Plan is an instance of a template tree that  has one or more index seeks at the leaf nodes  combines the leaf nodes by binary intersections or unions  applies rid lookup to retrieve missing columns  applies filter operator for non-sargable predicates  applies a sort operator to enforce order  Applicable to view requests, too 
12	Alternative Index Strategies (a) (b) (c) 
13	Overview of the Query Optimizer 
14	Bounding the improvement 
15	Relaxation-based Search Relaxing a configuration is replacing some structures by smaller but less efficient ones Advantages  merging and enumeration steps are interleaved. Merged structures are obtained lazily, on demand  re-optimizing a relaxed configuration to evaluate its cost is more efficient C1 has an index on (a,b) C2 has an index on (a,d) Replace C1 and C2 with C3 C3 has an index on (a,b,d) Re-optimize queries that used relaxed structures Bottom-up strategy; re-optimize all queries that reference the index table  provides more useful information to the DB administrator good configurations are iteratively relaxed at the end of tuning process, we have many alternatives 
16	Sample Tuning 
17	Relaxing Configurations Replacing a subset of its indexes and views Resulting configuration is  smaller at the cost  less efficient Progressively relaxing configurations results with the optimal configuration  fits in the available space  slightly less efficient than the initial one  There are two transformations  index transformations  view transformations 
18	Index Transformations - I Merging  obtain the best index I1,2 that can answer all requests either I1 or I2 makes I1 = ([a,b,c];{d,e,f}) and I2 = ([c,d,g];{e})   I1,2 = ([a,b,c];{d,e,f,g}) Splitting   splitting I1 and I2 produces IC (common index) and residual indexes IR1 and IR2  I1 = ([a,b,c];{d,e,f}) and I2 = ([a,c];{e})   IC = ([a,c];{e}), IR1 = ([b];{d,f}) 
19	Index Transformations - II Prefixing  obtain an index that can answer arbitrary requests Promotion to clustered  any index I over table T can be promoted to a clustered index Removal   any index can be removed to obtain a new configuration 
20	View Transformations Merging  all information from V1 and V2 can be obtained in V1,2 Removal  any view V can be removed to obtain a new configuration 
21	Template for Search Algorithm 
22	Configurations and Transformations Relaxing configurations Transform configurations useful in other configurations Search space is very large Crucial to develop good heuristics to guide the search 
23	Estimating Configuration Properties Critical properties of a given configuration in a physical design problem  the space the current configuration (C) consumes   the expected execution cost of the workload when C is available. To make a good decision on applying the given transformation, we should know  the amount of space consumption decrease  the expected execution cost increase  it is hard to guess these properties 
24	Space Consumption Space consumed by a configuration is the sum of sizes of all its physical structures  indexes and views To estimate the space consumed by an index  calculate the width of an entry in any node or page  calculate the number of entries per page and node  The space consumed by a view is estimated as the sum of sizes of each index  
25	Expected Execution Cost Execution cost of the relaxed configuration can be calculated by  re-optimizing all queries in the workload in C’ and calculate difference very expensive  re-optimizing the subset of queries in the workload that originally used workloads in C but do not appear in C’ expected to be efficient, but too costly to estimate the increase in execution cost of each resulting configuration  simple non-intrusive approach  can be implemented by simply analysing information 
26	Estimating Execution-cost 
27	Heuristics for Guiding the Research Penalty estimates the increase in execution cost per unit of storage  the expected decrease in storage space (T)  the maximum increase in cost (S)  penalty = T/S A reasonable heuristic would result with an increase in the penalty value 
28	Choosing Relaxing Configuration Choose the configuration with minimal estimated cost  impractical  the most efficient configurations require largest amount of space Another alternative  if the relaxed configuration does not fit in the available space, further relax it until it is under space constraints  choose the configuration with highest penalty among all relaxed configurations  if no candidate configuration is found, choose the configuration with minimum expected cost 
29	Variations and Optimizations Some minor optimizations and variations Shortcut evaluation  remove current configuration if no further improvement can be achieved Multiple transformations per iteration  apply more than one transformation to the current current configuration Shrinking configurations  remove all indexes and views that are not used to evaluate any query in the workload 
30	Experimental Study Synthetic and real databases Hundreds of different workloads State-of-the-art alternative; Commercial Tuning Tool (CTT) Physical recommendation metric  improvement = 100% (1 – cost (W,CR) / cost (W,CI))  CI = initial configuration, CR = recommended configuration, cost(W,C) = expected cost of evaluating all queries in the workload W under configuration C 
31	No Constraints - I 
32	No Constraints - II 
33	No Constraints - III 
34	Space Constraints 
35	Conclusion New automatic physical database tuning technique is proposed This technique uses a relaxation based search Reduces assumptions and heuristics Simple and complexity is reduced Gives comparable recommendations  
36	Thanks Any Questions ?? 
